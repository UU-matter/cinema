import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * Created by IIS on 25.02.2016.
 */

public class Cinema {
    public static void main(String[] args) throws SQLException {

        try (Connection connection = getConnection()) {

            try (PreparedStatement create1 = connection.prepareStatement("INSERT INTO HALLS (NUM, NROWS) VALUES (1, 10)")) {
                create1.execute();
            }

            try (PreparedStatement create2 = connection.prepareStatement("INSERT INTO SEANCES (STIME, HALL, PRICE, FILM, AGE, date_from, date_to ) " +
                    "VALUES ('14:20', 1, 250, 'Выживший', 18, 16.01.2016, 23.02.2016 )")) {
                create2.execute();
            }

            try (PreparedStatement create3 = connection.prepareStatement("INSERT INTO HROWS (HALL, ROW, SEATS) VALUES (1, ?, 30")) {
                for (int row = 1; row <= 10; row++) {
                    create3.setInt(1, row);
                    create3.execute();
                }
            }

//            try (PreparedStatement create4 = connection.prepareStatement("INSERT INTO RESERVATIONS (USERID, ROW, SEAT, rdate)" +
//                    " VALUES (Юдин, 6, 26, ")) {
//                create4.execute();
//            }


        }
    }

    public static Connection getConnection() throws SQLException {
        try {
            return DriverManager.getConnection("jdbc:derby:CinemaDB");
        } catch (SQLException e) {
            Connection c = DriverManager.getConnection("jdbc:derby:CinemaDB; create = true");
            createDB(c);
            return c;
        }
    }

    private static void createDB(Connection connection) throws SQLException {
        try (PreparedStatement create1 = connection.prepareStatement("CREATE TABLE HALLS (NUM INT NOT NULL GENERATED BY DEFAULT " +
                "AS IDENTITY (START WITH 100) PRIMARY KEY, NROWS INT NOT NULL)")) {
            create1.execute();
        }
        try (PreparedStatement create2 = connection.prepareStatement("CREATE TABLE SEANCES (ID INT NOT NULL GENERATED BY DEFAULT " +
                "AS IDENTITY (START WITH 100) PRIMARY KEY, STIME VARCHAR(5) NOT NULL, HALL INT NOT NULL," +
                "PRICE INT NOT NULL, FILM VARCHAR(100) NOT NULL, AGE INT NOT NULL, " +
                "date_from DATE NOT NULL, date_to DATE NOT NULL, " +
                "FOREIGN KEY (HALL) REFERENCES HALLS (NUM))")) {
            create2.execute();
        }
        try (PreparedStatement create3 = connection.prepareStatement("CREATE TABLE HROWS (HALL INT NOT NULL GENERATED BY DEFAULT "
                + "AS IDENTITY (START WITH 100) PRIMARY KEY, ROW INT NOT NULL, " +
                "SEATS INT NOT NULL, FOREIGN KEY(HALL) REFERENCES HALLS(NUM))")) {
            create3.execute();
        }

        try (PreparedStatement create4 = connection.prepareStatement("CREATE TABLE RESERVATIONS (USERID VARCHAR(100) NOT NULL, " +
                "ROW INT NOT NULL, SEAT INT NOT NULL, SEANCE INT NOT NULL, FOREIGN KEY (SEANCE) REFERENCES SEANCES (ID), rdate DATE NOT NULL)")) {
            create4.execute();
        }
    }
}
